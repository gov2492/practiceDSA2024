# Intuition
# Approach
1.Traverse till left
2.Reverse from left to right
3.link prev node of next to next left to right of next and right node to prev
# Complexity
- Time complexity:O(n)
- Space complexity:O(1)

# Code
```
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left == right){
            return head;
        }
        else{

            ListNode dummy = new ListNode(0);
            dummy.next = head;
            ListNode leftprev = dummy;
            ListNode curr = head;
            // traverse till left
            for(int i=0;i<left-1;i++){
                leftprev=leftprev.next;
                curr = curr.next;
            }
            //reverse from left to right
            ListNode prev = null;
            for(int i=0;i<right-left+1;i++){
                ListNode next = curr.next;
                curr.next = prev;
                prev = curr;
                curr = next;
            }
            //link prev node of next to next left to right of next and right node to prev
            leftprev.next.next = curr;
            leftprev.next = prev;
            return dummy.next;
        }
    }
    }

    
```
